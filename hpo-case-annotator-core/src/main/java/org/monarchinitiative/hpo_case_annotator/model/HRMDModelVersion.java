package org.monarchinitiative.hpo_case_annotator.model;

import com.google.common.collect.ComparisonChain;

/**
 * This class defines concept of versioning of HRMD data model that partially conforms to <a
 * href="http://semver.org/">semantic versioning</a>. <p> The partial conformation is caused by the fact that the class
 * recognizes major, minor and patch version numbers but <em>not</em> pre-release and build metadata.
 */
@Deprecated
public class HRMDModelVersion implements Comparable<HRMDModelVersion> {

    /**
     * Tokens of version number specified by semantic versioning.
     */
    private final int major, minor, patch;


    /**
     * Create a new instance.
     *
     * @param major non-negative integer representing the <em>major</em> version number.
     * @param minor non-negative integer representing the <em>minor</em> version number.
     * @param patch non-negative integer representing the <em>patch</em> version number.
     * @throws IllegalArgumentException if negative integers are used to create the version instance.
     */
    public HRMDModelVersion(int major, int minor, int patch) {
        if (major < 0)
            throw new IllegalArgumentException(String.format("Unable to create version using %s as major version " +
                    "number", major));
        if (minor < 0)
            throw new IllegalArgumentException(String.format("Unable to create version using %s as minor version " +
                    "number", minor));
        if (patch < 0)
            throw new IllegalArgumentException(String.format("Unable to create version using %s as patch version " +
                    "number", patch));

        this.major = major;
        this.minor = minor;
        this.patch = patch;
    }


    /**
     * Try to create a new instance from String representation of version.
     *
     * @param version String containing version information in format like <em>v0.1.2</em> (vMAJOR.MINOR.PATCH) that is
     *                generated by calling {@link HRMDModelVersion#toString()}.
     * @throws IllegalArgumentException if unable to create version instance from provided String.
     */
    public HRMDModelVersion(String version) throws IllegalArgumentException {
        if (!version.matches("v\\d+.\\d+.\\d+"))
            throw new IllegalArgumentException(String.format("String representing version '%s' doesn't look valid.",
                    version));
        String[] fields = version.split("\\.");
        if (fields.length != 3)
            throw new IllegalArgumentException(String.format("Incorrect number of fields in the input %s. " +
                    "Expected: 3, actual: %d", version, fields.length));

        // check major version number.
        if (!fields[0].matches("v\\d+"))
            throw new IllegalArgumentException(String.format("Part representing major version '%s' is invalid.",
                    fields[0]));
        if (fields[0].matches("v0\\d+"))
            throw new IllegalArgumentException(String.format("Major version mustn't start with zero: %s", fields[0]));
        this.major = Integer.parseInt(fields[0].substring(1));

        // check minor version number.
        if (!fields[1].matches("\\d+"))
            throw new IllegalArgumentException(String.format("Part representing major version '%s' is invalid.",
                    fields[1]));
        this.minor = Integer.parseInt(fields[1]);

        // check patch version number.
        if (!fields[2].matches("\\d+"))
            throw new IllegalArgumentException(String.format("Part representing patch version '%s' is invalid.",
                    fields[2]));
        this.patch = Integer.parseInt(fields[2]);
    }


    public int getMajor() {
        return major;
    }


    public int getMinor() {
        return minor;
    }


    public int getPatch() {
        return patch;
    }


    /**
     * Compare version number tokens in this order. <ol> <li>major</li> <li>minor</li> <li>patch</li> </ol> Comparisons
     * are made to conform with ascending order.
     *
     * @param other instance to be compared with this.
     * @return comparison result as specified in {@link Comparable} interface.
     */
    @Override
    public int compareTo(HRMDModelVersion other) {
        return ComparisonChain.start()
                .compare(this.major, other.major)
                .compare(this.minor, other.minor)
                .compare(this.patch, other.patch)
                .result();
    }


    /**
     * {@inheritDoc}
     *
     * @return
     */
    @Override
    public int hashCode() {
        int result = getMajor();
        result = 31 * result + getMinor();
        result = 31 * result + getPatch();
        return result;
    }


    /**
     * Two instances are equal if their major, minor and patch version numbers are the same. {@inheritDoc}
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        HRMDModelVersion that = (HRMDModelVersion) o;

        if (getMajor() != that.getMajor()) return false;
        if (getMinor() != that.getMinor()) return false;
        return getPatch() == that.getPatch();
    }


    /**
     * {@inheritDoc}
     *
     * @return representation of this version in format like <em>v0.1.2</em> (vMAJOR.MINOR.PATCH).
     */
    @Override
    public String toString() {
        return String.format("v%s.%s.%s", getMajor(), getMinor(), getPatch());
    }
}
